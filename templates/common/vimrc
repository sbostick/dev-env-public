" DEPRECATED: SEE .CONFIG/NVIM/ INSTEAD. KEEPING THIS IN CASE I NEED TO
" RESURRECT AN OLD VIM DEV ENV WHERE NEOVIM IS NOT AVAILABLE.

" REMINDER: key bindings
" shift + K           -- invoke silver searcher with identifier under cursor
" ctrl + t, ctrl + d  -- indent/undent shiftwidth from insert mode
" ctrl + ], ctrl + t  -- goto tag under cursor, goto previous tag
" m + [a-z]           -- local bookmark (accessible when editing same buffer)
" m + [A-Z]           -- global bookmark (accessible when editing any buffer)
" ' + [a-zA-Z]        -- goto bookmark

" Disable error beep/flash
set noerrorbells
set visualbell
set t_vb=
if has('autocmd')
    autocmd GUIEnter * set vb t_vb=
endif

if has("gui_running")
  set winaltkeys=no
  set guioptions-=m  " disable menu bar
  set guioptions-=T  " disable tool bar
else
  if &term == "screen"
    set t_ts=_
    set t_fs=\\
  endif
endif

"let c_comment_strings=1
"unlet c_comment_strings

" Don't highlight matching parens/braces/brackets
let loaded_matchparen = 1

syntax on            " Enable syntax highlighting
set cpoptions-=u     " w/o this (undo, undo) is a nop
set cpoptions-=$     " put '$' at eol when changing line
set cpoptions-=%     " match comments and preproc directives in C programs
set cpoptions-=x     " abandon command line when esc is pressed
set cpoptions-=<     " allow <C-j> and <esc> style characters codes in mappings
set ml               " modeline on
set nojoinspaces     " use just a single space between sentences on join
set modelines=5      " check 5 lines for mode line
set shell=/bin/bash  " shell invoked via ':!'
set hlsearch         " Switch on search pattern highlighting.
set incsearch        " incremental search matching
set wrapscan         " wrap searches
set ignorecase       " when searching
set mousehide        " Hide the mouse pointer while typing
set number           " line numbers

" Auto formatting is nice for comments, but not for code.  The format
" options control this.  See vim help 'fo-table'.
set formatoptions=q

" Text wrapping
set wrap             " wrap long lines instead of scrolling
set linebreak        " only wrap  at a character in the 'breakat' option
set textwidth=0
set wrapmargin=0

"set autoindent      " simple indenting (uses previous line indent)
"set smartindent     " smart indenting (deprecated)
set cindent          " smartest indenting
set cinkeys-=0#      " no special treatment for leading hash (otherwise snaps to column 0)
set indentkeys-=0#   " no special treatment for leading hash (otherwise snaps to column 0)

set tabstop=8        " keep standard tab width of 8
set nosmarttab       " use shiftwidth when inserting tab (if enabled)
set softtabstop=0    " number of spaces that tab uses (0 means feature is off)
set expandtab        " whether to use spaces in place of tab
set shiftwidth=2     " then use CTRL-T and CTRL-D from insert mode
set showmatch        " show matching braces and parens
set guioptions-=T    " hide toolbar
set bs=2             " make backspace work as it should
set statusline=%-20.30F\ line:%l\-%-10L\ col:%-20c\ %=[%p%%]
set laststatus=2     " Always use status line
set history=20       " command line history
set splitbelow       " split puts new window below current
set splitright       " vsplit puts new window to right of current
set dictionary=~/.dictionary
set list            " show special characters (tab, newline, ...)
set listchars=tab:‚ñ∏-
set listchars+=trail:¬∑
set iskeyword+=-    " do not split words on '-'
set nobackup
set writebackup
set backupdir=/tmp//  " dir for backup files
set directory=/tmp//  " dir for swap files
set undodir=/tmp//    " dir for undo files
set undolevels=100

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                      Abbreviations                       "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

inoreabbrev TODO(sbostick): TODO(sbostick):

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                  Font and Color Scheme                   "
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" This is nice too:
" https://github.com/chriskempson/base16-vim/
" https://github.com/chriskempson/base16-shell/

let my_color_scheme = "apprentice"

if my_color_scheme == "solarized"
  set background=dark
  set t_Co=256
  let g:solarized_termcolors=256
  colorscheme solarized
  highlight ExtraWhitespace ctermbg=218
elseif my_color_scheme == "apprentice"
  set background=dark
  set t_Co=256
  colorscheme apprentice
  highlight Search ctermfg=DarkBlue ctermbg=247
  highlight ColorColumn ctermbg=233
  highlight ErrorMsg ctermbg=88 ctermfg=252
  "highlight Comment ctermfg=252 ctermbg=239
  highlight Comment ctermfg=243 ctermbg=234
  highlight Normal ctermbg=234 ctermfg=252
  highlight Visual ctermbg=233 ctermfg=238
  highlight Directory ctermfg=243
  highlight ExtraWhitespace ctermbg=218
elseif my_color_scheme == "peaksea"
  set background=light
  colorscheme peaksea
  highlight ExtraWhitespace ctermbg=218
elseif my_color_scheme == "kolor"
  set background=light
  colorscheme kolor
  highlight ExtraWhitespace ctermbg=218
elseif my_color_scheme == "base16-default-dark"
  set background=dark
  let base16colorspace=256
  colorscheme base16-default-dark
  highlight ExtraWhitespace ctermbg=218
else
  set background=dark
  colorscheme base16-default-dark
  highlight ExtraWhitespace ctermbg=218
endif

" Highlight trailing whitespace and mixed tabs/spaces, except in insert mode
match ExtraWhitespace /\s\+$/
autocmd BufWinEnter * match ExtraWhitespace /\s\+$/
autocmd InsertEnter * match ExtraWhitespace /\s\+\%#\@<!$/
autocmd InsertLeave * match ExtraWhitespace /\s\+$/
autocmd BufWinLeave * call clearmatches()

" Highlight trailing whitespace in Markdown files as yellow since it might
" indicate line continuation. The color should communicate a warning condition
" instead of an error condition. Suitable bg colors are 7, 183, 104, 111, 187
if has('autocmd')
  autocmd BufWinEnter,InsertEnter,InsertLeave *.md,*.mkd
    \ highlight ExtraWhitespace ctermfg=0 ctermbg=7
endif

" Configure 100+ char error indicator (red font)
if exists('+colorcolumn')
    set colorcolumn=80
    "let &colorcolumn="80,".join(range(120,999),",")
endif

" Window pane and tab switching
if !exists("g:os")
  let g:os = substitute(system('uname'), '\n', '', '')
endif

if has('macunix')
  " ctrl+v option+k
  nmap <silent> Àö :wincmd k<CR>
  " ctrl+v option+j
  nmap <silent> ‚àÜ :wincmd j<CR>
  " ctrl+v option+h
  nmap <silent> Àô :wincmd h<CR>
  " ctrl+v option+l
  nmap <silent> ¬¨ :wincmd l<CR>
else
  nmap <silent> <M-k> :wincmd k<CR>
  nmap <silent> <M-j> :wincmd j<CR>
  nmap <silent> <M-h> :wincmd h<CR>
  nmap <silent> <M-l> :wincmd l<CR>
endif

map <silent> <Left> :tabprev<CR>
map <silent> <Right> :tabnext<CR>

" Map ctrl-c to copy visual selection to system clipboard
vnoremap <C-c> :w !pbcopy<CR><CR>

" Map shortcuts for window resizing
"nmap <silent> <M-h> :wincmd <<CR>
"nmap <silent> <M-l> :wincmd><CR>
"nmap <silent> <M-j> :wincmd-<CR>
"nmap <silent> <M-k> :wincmd+<CR>

let g:mapleader='\'
set notimeout nottimeout

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                  PLUG LOADER                            "
"       https://github.com/junegunn/vim-plug              "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" MAKE SURE YOU USE SINGLE QUOTES
" REMEMBER TO RELOAD .vimrc AND :PlugInstall

call plug#begin()

" NerdTree
Plug 'https://github.com/scrooloose/nerdtree.git'
Plug 'https://github.com/Xuyuanp/nerdtree-git-plugin.git'
Plug 'https://github.com/preservim/nerdcommenter.git'

" Syntax Highlighting
Plug 'https://github.com/chr4/nginx.vim.git'
Plug 'https://github.com/cespare/vim-toml.git', { 'branch': 'main' }
Plug 'https://github.com/hashivim/vim-terraform.git'

" Code Completion (disabled because it breaks git commit interactive editing)
"Plug 'https://github.com/SirVer/ultisnips.git'
"Plug 'https://github.com/honza/vim-snippets.git'

" Language Support
Plug 'https://github.com/fatih/vim-go.git'
Plug 'https://github.com/preservim/tagbar.git'
Plug 'https://github.com/kien/ctrlp.vim.git'

" Git
Plug 'https://github.com/airblade/vim-gitgutter.git'

call plug#end()

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                NERDTREE SETTINGS                        "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Start NERDTree if vim is opened without a file argument
" https://github.com/scrooloose/nerdtree
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif

" Configurable settings
" https://github.com/scrooloose/nerdtree/blob/master/doc/NERDTree.txt
let g:NERDTreeHijackNetrw=1
let g:NERDTreeShowHidden=1
let g:NERDTreeWinSize=40
let g:NERDTreeQuitOnOpen=0
let g:NERDTreeShowBookmarks=0
let g:NERDTreeDirArrows=1
let g:NERDTreeChDirMode=2
let g:NERDTreeNaturalSort=1
let g:NERDTreeMinimalUI=1  " This removes '..'; use 'u' or 'U'; '?' for help
let g:NERDTreeIgnore = [
    \ '\.pyc$', '\.swp$', '\.git$', '\.DS_Store$',
    \ 'terraform-cache$', '\.terraform$']
let g:NERDTreeGitStatusShowIgnored = 1 " This can be slow
let g:NERDTreeAutoDeleteBuffer = 1
let g:NERDTreeNodeDelimiter = "\u00a0"  " https://stackoverflow.com/a/53708512
let g:NERDTreeCascadeSingleChildDir=0
let g:NERDTreeCascadeOpenSingleChildDir=1

" Mouse mode 'a' disables double-click word selection and cmd+c copy via macos.
" Mouse mode 'a' enables scrolling the buffer with mouse wheel.
" Mouse mode 'a' enables nerdtree click nav.
set mouse=a

map <C-n> :NERDTreeToggle<CR>
map <C-m> :NERDTreeFind<CR>
nmap <Leader>r :NERDTreeRefreshRoot<CR>

" https://github.com/Xuyuanp/nerdtree-git-plugin
let g:NERDTreeGitStatusIndicatorMapCustom = {
    \ "Modified"  : "‚úπ",
    \ "Staged"    : "‚úö",
    \ "Untracked" : "‚ú≠",
    \ "Renamed"   : "‚ûú",
    \ "Unmerged"  : "‚ïê",
    \ "Deleted"   : "‚úñ",
    \ "Dirty"     : "‚úó",
    \ "Clean"     : "",
    \ 'Ignored'   : '‚òí',
    \ "Unknown"   : "?"}

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                 tagbar settings                         "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
nmap <F8> :TagbarToggle<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"              nerdcommenter settings                     "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Usage:
"   [count] <Leader> cm
"   [count] <Leader> cs
"   [count] <Leader> cc
"   [visual-block] <Leader> cs

" https://github.com/preservim/nerdcommenter
let g:NERDCreateDefaultMappings = 1
let g:NERDSpaceDelims = 1
let g:NERDCompactSexyComs = 1
let g:NERDDefaultAlign = 'left'
let g:NERDAltDelims_java = 1
let g:NERDCustomDelimiters = {'c': {'left':'/**','right':'*/'}}
let g:NERDCommentEmptyLines = 1
let g:NERDTrimTrailingWhitespace = 1
let g:NERDToggleCheckAllLines = 1

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                CTRLP SETTINGS                           "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" https://kien.github.io/ctrlp.vim/
" Probably wnat to disable for monolithic repos
let g:ctrlp_map = '<c-p>'
let g:ctrlp_cmd = 'CtrlP'
let g:ctrlp_root_markers = ['.git']
let g:ctrlp_working_path_mode = 'ra'

set wildignore+=*/tmp/*,*.so,*.swp,*.zip

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                NETRW SETTINGS                           "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" When using the built-in 'netrw' file browser I prefer these settings
" but have since switched to nerdtree.
if has('false')
  let g:netrw_banner = 0
  let g:netrw_liststyle = 3
  let g:netrw_browse_split = 3
  let g:netrw_altv = 1
  let g:netrw_winsize = 25
  augroup ProjectDrawer
    autocmd!
    autocmd VimEnter * :Vexplore
  augroup END
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"             THE SILVER SEARCHER SETTINGS                "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" brew install the_silver_searcher
" https://robots.thoughtbot.com/faster-grepping-in-vim
" https://github.com/ggreer/the_silver_searcher
if executable('ag')
  " Use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor

  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
endif

" bind K to grep word under cursor
nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                 VIM MATCHUP SETTINGS                    "
"        https://github.com/andymass/vim-matchup          "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:matchup_enabled = 1
let g:matchup_matchparen_enabled = 1
":hi MatchParen ctermbg=blue guibg=lightblue cterm=italic gui=italic

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"             Buffer Management Configuration             "
" https://vim.fandom.com/wiki/Easier_buffer_switching     "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set wildmode=list:longest,full
set wildchar=<TAB>   " use  <TAB> for command line completion
set wildmenu

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"             File Type Identification                    "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

if has('autocmd')
  autocmd BufNewFile,BufRead *.hcl set syntax=terraform
  autocmd BufNewFile,BufRead *.tf set syntax=terraform
  " TypeScript syntax highlighting times out so use plain javascript
  autocmd BufNewFile,BufRead *.ts set syntax=javascript
  " Same for TypeScript with React
  autocmd BufNewFile,BufRead *.tsx set syntax=javascript
  " Jinja templates should use syntax of underlying config
  autocmd BufNewFile,BufRead *.yaml.tpl set syntax=yaml
  autocmd BufNewFile,BufRead *.yaml.j2 set syntax=yaml
  autocmd BufNewFile,BufRead *.json.tpl set syntax=javascript
  autocmd BufNewFile,BufRead *.json.j2 set syntax=javascript
endif

" Detect file types and load language indent files
" Also necessary for omnifunc completion
filetype plugin indent on
set omnifunc=syntaxcomplete#Complete

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                  GoLang Settings                        "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
autocmd FileType go setlocal shiftwidth=4 tabstop=4 noexpandtab
autocmd FileType go setlocal omnifunc=syntaxcomplete#Complete

" Make autocomplete prompt appear when '.' is pressed
autocmd filetype go inoremap <buffer> . .<C-x><C-o>

" https://github.com/fatih/vim-go
set autowrite
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_function_calls = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_operators = 1
let g:go_fmt_autosave = 1
let g:go_fmt_command = "goimports"
let g:go_auto_type_info = 1


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                  Python Settings                        "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
autocmd FileType python setlocal shiftwidth=4 tabstop=4 expandtab

" TODO: fixme
"autocmd BufNewFile,BufRead *.py
"    \ set tabstop=8
"    \ set softtabstop=4
"    \ set shiftwidth=4
"    \ set textwidth=79
"    \ set expandtab
"    \ set autoindent
"    \ set fileformat=unix

set encoding=utf-8

" TODO: tryout these plugins
" - https://github.com/ycm-core/YouCompleteMe
" - https://github.com/vim-scripts/indentpython.vim
" - https://github.com/vim-syntastic/syntastic
" - https://github.com/altercation/vim-colors-solarized
" - https://github.com/jnurmine/Zenburn

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                  YAML Settings                          "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
autocmd FileType yaml setlocal shiftwidth=4 tabstop=4 expandtab

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                  JSON Settings                          "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
autocmd FileType json setlocal shiftwidth=4 tabstop=4 expandtab

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"                  YAML Settings                          "
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

autocmd BufNewFile,BufRead *.yaml setlocal ts=8 sts=4 sw=2 ai
